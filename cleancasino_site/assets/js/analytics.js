// CleanCasino Analytics - –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Ç—Ä–µ–∫–∏–Ω–≥
class CleanCasinoAnalytics {
  constructor() {
    // –ï—Å–ª–∏ —Å–∞–π—Ç –Ω–∞ GitHub Pages, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–Ω–µ—à–Ω–µ–≥–æ API-–±—ç–∫–µ–Ω–¥–∞
    const defaultApi = '/api/analytics';
    const externalApi = window.CC_API_BASE || localStorage.getItem('CC_API_BASE');
    this.apiBase = externalApi ? (externalApi.replace(/\/$/, '') + '/api/analytics') : defaultApi;
    this.sessionId = this.getSessionId();
    this.pageStartTime = Date.now();
    this.scrollDepth = 0;
    this.maxScrollDepth = 0;
    this.isTracking = true;
    
    this.init();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  init() {
    if (!this.isTracking) return;

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    this.trackPageView();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º
    this.trackButtonClicks();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º
    this.trackFormSubmissions();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
    this.trackScroll();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ —É—Ö–æ–¥–µ
    this.trackTimeOnPage();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    this.trackPageVisibility();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ sessionId
  getSessionId() {
    let sessionId = localStorage.getItem('cc_session_id');
    if (!sessionId) {
      sessionId = this.generateSessionId();
      localStorage.setItem('cc_session_id', sessionId);
    }
    return sessionId;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
  generateSessionId() {
    return 'cc_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  getCurrentPage() {
    return window.location.pathname || '/';
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  async sendData(endpoint, data) {
    try {
      const response = await fetch(this.apiBase + endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
      return { success: false, error: error.message };
    }
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  async trackPageView() {
    const page = this.getCurrentPage();
    const result = await this.sendData('/pageview', { page });
    
    if (result.success) {
      console.log('üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Å–ª–µ–∂–µ–Ω–∞:', page);
    }
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
  trackButtonClicks() {
    document.addEventListener('click', (event) => {
      const target = event.target;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ —Å—Å—ã–ª–∫–æ–π
      if (target.matches('button, .btn, a[href], input[type="submit"]')) {
        const buttonId = target.id || target.className || target.tagName;
        const buttonText = target.textContent?.trim() || target.value || '';
        const page = this.getCurrentPage();
        
        this.sendData('/button-click', {
          buttonId,
          buttonText,
          page
        });
        
        console.log('üéØ –ö–ª–∏–∫ –æ—Ç—Å–ª–µ–∂–µ–Ω:', buttonId, buttonText);
      }
    });
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º
  trackFormSubmissions() {
    document.addEventListener('submit', (event) => {
      const form = event.target;
      const formId = form.id || form.className || 'unknown_form';
      
      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã (–±–µ–∑ –ø–∞—Ä–æ–ª–µ–π)
      const formData = {};
      const formElements = form.elements;
      
      for (let element of formElements) {
        if (element.name && element.type !== 'password') {
          formData[element.name] = element.value;
        }
      }
      
      this.sendData('/form-submission', {
        formId,
        formData
      });
      
      console.log('üìù –§–æ—Ä–º–∞ –æ—Ç—Å–ª–µ–∂–µ–Ω–∞:', formId);
    });
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞
  trackScroll() {
    let scrollTimeout;
    
    window.addEventListener('scroll', () => {
      clearTimeout(scrollTimeout);
      
      scrollTimeout = setTimeout(() => {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const documentHeight = document.documentElement.scrollHeight - window.innerHeight;
        const scrollDepth = Math.round((scrollTop / documentHeight) * 100);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–æ–ª–ª —É–≤–µ–ª–∏—á–∏–ª—Å—è
        if (scrollDepth > this.maxScrollDepth) {
          this.maxScrollDepth = scrollDepth;
          
          this.sendData('/scroll', {
            scrollDepth,
            page: this.getCurrentPage()
          });
          
          console.log('üìú –°–∫—Ä–æ–ª–ª –æ—Ç—Å–ª–µ–∂–µ–Ω:', scrollDepth + '%');
        }
      }, 100);
    });
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  trackTimeOnPage() {
    window.addEventListener('beforeunload', () => {
      const timeSpent = Date.now() - this.pageStartTime;
      const page = this.getCurrentPage();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendBeacon –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (navigator.sendBeacon) {
        const data = JSON.stringify({
          timeSpent,
          page
        });
        
        navigator.sendBeacon(this.apiBase + '/time-on-page', data);
      } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        this.sendData('/time-on-page', {
          timeSpent,
          page
        });
      }
      
      console.log('‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', Math.round(timeSpent / 1000) + '—Å');
    });
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  trackPageVisibility() {
    let hiddenTime = 0;
    let isHidden = false;
    
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        isHidden = true;
        hiddenTime = Date.now();
      } else {
        if (isHidden) {
          const timeHidden = Date.now() - hiddenTime;
          console.log('üëÅÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞:', Math.round(timeHidden / 1000) + '—Å');
          isHidden = false;
        }
      }
    });
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
  async trackCustomEvent(eventType, eventData = {}) {
    const result = await this.sendData('/event', {
      eventType,
      eventData: {
        ...eventData,
        page: this.getCurrentPage(),
        timestamp: new Date().toISOString()
      }
    });
    
    if (result.success) {
      console.log('üéØ –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç—Å–ª–µ–∂–µ–Ω–æ:', eventType);
    }
    
    return result;
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (–ø–æ–¥–ø–∏—Å–∫–∏)
  async trackConversion(email, telegram = null) {
    return this.trackCustomEvent('conversion', {
      type: 'subscription',
      email,
      telegram
    });
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
  trackElementInteraction(selector, eventType = 'click') {
    const elements = document.querySelectorAll(selector);
    
    elements.forEach(element => {
      element.addEventListener(eventType, () => {
        this.trackCustomEvent('element_interaction', {
          selector,
          eventType,
          elementText: element.textContent?.trim() || '',
          elementId: element.id || '',
          elementClass: element.className || ''
        });
      });
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  async getStats() {
    try {
      const response = await fetch(this.apiBase + '/stats');
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return { success: false, error: error.message };
    }
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞
  setTracking(enabled) {
    this.isTracking = enabled;
    console.log('üìä –¢—Ä–µ–∫–∏–Ω–≥:', enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω');
  }

  // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
  clearSession() {
    localStorage.removeItem('cc_session_id');
    this.sessionId = this.getSessionId();
    console.log('üîÑ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞');
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  window.ccAnalytics = new CleanCasinoAnalytics();
  
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
  window.trackEvent = (eventType, eventData) => {
    if (window.ccAnalytics) {
      return window.ccAnalytics.trackCustomEvent(eventType, eventData);
    }
  };
  
  window.trackConversion = (email, telegram) => {
    if (window.ccAnalytics) {
      return window.ccAnalytics.trackConversion(email, telegram);
    }
  };
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = CleanCasinoAnalytics;
}
